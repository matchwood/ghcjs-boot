diff --git a/System/Directory.hs b/System/Directory.hs
index be98632..de9311e 100644
--- a/System/Directory.hs
+++ b/System/Directory.hs
@@ -1,9 +1,17 @@
 {-# LANGUAGE CPP #-}
+#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS)
+#define posix_OS 1
+#else
+#undef posix_OS
+#endif
 
 #if !(MIN_VERSION_base(4,8,0))
 -- In base-4.8.0 the Foreign module became Safe
 {-# LANGUAGE Trustworthy #-}
 #endif
+#ifdef __GHCJS__
+{-# LANGUAGE ForeignFunctionInterface, JavaScriptFFI, UnliftedFFITypes, MagicHash #-}
+#endif
 
 -----------------------------------------------------------------------------
 -- |
@@ -115,13 +123,63 @@ import Data.Time.Clock.POSIX
   , utcTimeToPOSIXSeconds
   , POSIXTime
   )
-#ifdef mingw32_HOST_OS
+
+
+#if defined(ghcjs_HOST_OS)
+import GHCJS.Prim
+import Foreign.C.Error
+
+#elif defined(mingw32_HOST_OS)
 import qualified System.Win32 as Win32
 #else
 import qualified GHC.Foreign as GHC
 import qualified System.Posix as Posix
 #endif
 
+
+#ifdef ghcjs_HOST_OS
+
+type JSObject = JSVal
+type JSString = JSVal
+type JSArray  = JSVal
+
+throwErrnoIfJSNull :: String -> IO JSVal -> IO JSVal
+throwErrnoIfJSNull msg m = do
+  r <- m
+  if isNull r then throwErrno msg
+              else return r
+
+--------------------------------------------------------------
+
+foreign import javascript interruptible "h$directory_getPermissions($1,$c);"                js_getPermissions                :: JSString -> IO Int
+foreign import javascript interruptible "h$directory_setPermissions($1,$2,$c);"             js_setPermissions                :: JSString -> Int -> IO Int
+foreign import javascript interruptible "h$directory_copyPermissions($1,$2,$c);"            js_copyPermissions               :: JSString -> JSString -> IO Int
+foreign import javascript interruptible "h$directory_createDirectory($1,$c);"               js_createDirectory               :: JSString -> IO Int
+foreign import javascript interruptible "h$directory_removeDirectory($1,$c);"               js_removeDirectory               :: JSString -> IO Int
+foreign import javascript interruptible "h$directory_removeFile($1,$c);"                    js_removeFile                    :: JSString -> IO Int
+foreign import javascript interruptible "h$directory_renameDirectory($1,$c);"               js_renameDirectory               :: JSString -> JSString -> IO Int
+foreign import javascript interruptible "h$directory_renameFile($1,$2,$c);"                 js_renameFile                    :: JSString -> JSString -> IO Int
+foreign import javascript unsafe "h$directory_canonicalizePath($1)"              js_canonicalizePath              :: JSString -> IO JSString
+foreign import javascript interruptible "h$directory_findExecutables($1,$c);"               js_findExecutables               :: JSString -> IO JSArray
+foreign import javascript interruptible "h$directory_getDirectoryContents($1,$c);"          js_getDirectoryContents          :: JSString -> IO JSArray
+foreign import javascript interruptible "h$directory_copyFileWithMetadata($1,$2,$c);"       js_copyFileWithMetadata          :: JSString -> JSString -> IO ()
+foreign import javascript unsafe "h$directory_getCurrentDirectory()"             js_getCurrentDirectory           :: IO JSString
+foreign import javascript unsafe "h$directory_setCurrentDirectory($1)"           js_setCurrentDirectory           :: JSString -> IO Int
+foreign import javascript unsafe "h$directory_getHomeDirectory()"                js_getHomeDirectory              :: IO JSString
+foreign import javascript unsafe "h$directory_getAppUserDataDirectory($1)"       js_getAppUserDataDirectory       :: JSString -> IO JSString
+foreign import javascript unsafe "h$directory_getUserDocumentsDirectory()"       js_getUserDocumentsDirectory     :: IO JSString
+foreign import javascript unsafe "h$directory_getTemporaryDirectory()"           js_getTemporaryDirectory         :: IO JSString
+foreign import javascript unsafe "h$directory_exeExtension()"                    js_exeExtension                  :: JSString
+foreign import javascript interruptible "h$directory_getFileStatus($1,$c);"                 js_getFileStatus                 :: JSString -> IO JSObject
+foreign import javascript interruptible "h$directory_getFileOrSymlinkStatus($1,$c);"        js_getFileOrSymlinkStatus        :: JSString -> IO JSObject
+foreign import javascript unsafe "h$directory_getFileStatusModificationTime($1)" js_getFileStatusModificationTime :: JSObject -> IO Double
+foreign import javascript unsafe "h$directory_getFileStatusAccessTime($1)"       js_getFileStatusAccessTime       :: JSObject -> IO Double
+foreign import javascript unsafe "h$directory_getFileStatusIsDirectory($1)"      js_getFileStatusIsDirectory      :: JSObject -> IO Bool
+foreign import javascript unsafe "h$directory_getFileStatusIsSymbolicLink($1)"   js_getFileStatusIsSymbolicLink   :: JSObject -> IO Bool
+#endif
+
+
+
 {- $intro
 A directory contains a series of entries, each of which is a named
 reference to a file system object (file, directory etc.).  Some
@@ -200,7 +258,15 @@ The operation may fail with:
 
 getPermissions :: FilePath -> IO Permissions
 getPermissions name =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+  do
+  perms <-  throwErrnoIfMinus1 "getPermissions" $ js_getPermissions (toJSString name)
+  return (Permissions { readable   = testBit perms 0
+                      , writable   = testBit perms 1
+                      , executable = testBit perms 2
+                      , searchable = testBit perms 3
+                      })
+#elif defined(mingw32_HOST_OS)
   -- issue #9: Windows doesn't like trailing path separators
   withFilePath (dropTrailingPathSeparator name) $ \s ->
   -- stat() does a better job of guessing the permissions on Windows
@@ -255,7 +321,12 @@ The operation may fail with:
 
 setPermissions :: FilePath -> Permissions -> IO ()
 setPermissions name (Permissions r w e s) =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+  do
+  let bitIf b i = if b then bit i else 0
+  throwErrnoIfMinus1_ "setPermissions" $
+    js_setPermissions (toJSString name) (bitIf r 0 .|. bitIf w 1 .|. bitIf e 2 .|. bitIf s 3)
+#elif defined(mingw32_HOST_OS)
   allocaBytes sizeof_stat $ \ p_stat ->
   withFilePath name $ \p_name -> do
     throwErrnoIfMinus1_ "setPermissions" $
@@ -287,7 +358,10 @@ setPermissions name (Permissions r w e s) =
 
 copyPermissions :: FilePath -> FilePath -> IO ()
 copyPermissions source dest =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+  throwErrnoIfMinus1_ "copyPermissions" $
+    js_copyPermissions (toJSString source) (toJSString dest)
+#elif defined(mingw32_HOST_OS)
   allocaBytes sizeof_stat $ \ p_stat ->
   withFilePath source $ \p_source ->
   withFilePath dest $ \p_dest -> do
@@ -300,7 +374,7 @@ copyPermissions source dest =
   copyPermissionsFromStatus stat dest
 #endif
 
-#ifndef mingw32_HOST_OS
+#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS)
 copyPermissionsFromStatus :: Posix.FileStatus -> FilePath -> IO ()
 copyPermissionsFromStatus st dst = do
   Posix.setFileMode dst (Posix.fileMode st)
@@ -348,7 +422,10 @@ The path refers to an existing non-directory object.
 
 createDirectory :: FilePath -> IO ()
 createDirectory path = do
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+  throwErrnoIfMinus1_ "createDirectory" $
+    js_createDirectory (toJSString path)
+#elif defined(mingw32_HOST_OS)
   Win32.createDirectory path Nothing
 #else
   Posix.createDirectory path 0o777
@@ -399,7 +476,11 @@ createDirectoryIfMissing create_parents path0
               unless canIgnore (ioError e)
           | otherwise              -> ioError e
       where
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+        isDir = js_getFileStatusIsDirectory =<<
+                js_getFileOrSymlinkStatus (toJSString dir)
+
+#elif defined(mingw32_HOST_OS)
         isDir = withFileStatus "createDirectoryIfMissing" dir isDirectory
 #else
         isDir = (Posix.isDirectory <$> Posix.getFileStatus dir)
@@ -417,7 +498,13 @@ data DirectoryType = NotDirectory
 getDirectoryType :: FilePath -> IO DirectoryType
 getDirectoryType path =
   (`ioeAddLocation` "getDirectoryType") `modifyIOError` do
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+    stat <- js_getFileOrSymlinkStatus (toJSString path)
+    isDir <- js_getFileStatusIsDirectory stat
+    return $ if isDir
+             then Directory
+             else NotDirectory
+#elif defined(mingw32_HOST_OS)
     isDir <- withFileStatus "getDirectoryType" path isDirectory
     if isDir
       then do
@@ -477,7 +564,9 @@ The operand refers to an existing non-directory object.
 
 removeDirectory :: FilePath -> IO ()
 removeDirectory path =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+  throwErrnoIfMinus1_ "removeDirectory" $ js_removeDirectory (toJSString path)
+#elif defined(mingw32_HOST_OS)
   Win32.removeDirectory path
 #else
   Posix.removeDirectory path
@@ -621,7 +710,9 @@ The operand refers to an existing directory.
 
 removeFile :: FilePath -> IO ()
 removeFile path =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+  throwErrnoIfMinus1_ "removeFile" $ js_removeFile (toJSString path)
+#elif defined(mingw32_HOST_OS)
   Win32.deleteFile path
 #else
   Posix.removeLink path
@@ -678,6 +769,10 @@ Either path refers to an existing non-directory object.
 
 renameDirectory :: FilePath -> FilePath -> IO ()
 renameDirectory opath npath =
+#if defined(ghcjs_HOST_OS)
+  throwErrnoIfMinus1_ "renameDirectory" $
+    js_renameDirectory (toJSString opath) (toJSString npath)
+#else
    -- XXX this test isn't performed atomically with the following rename
 #ifdef mingw32_HOST_OS
    -- ToDo: use Win32 API
@@ -807,7 +902,11 @@ renamePath :: FilePath                  -- ^ Old path
            -> FilePath                  -- ^ New path
            -> IO ()
 renamePath opath npath = (`ioeAddLocation` "renamePath") `modifyIOError` do
-#ifdef mingw32_HOST_OS
+
+#if defined(ghcjs_HOST_OS)
+   throwErrnoIfMinus1_ "renamePath" $
+     js_renameFile (toJSString opath) (toJSString npath)
+#elif defined(mingw32_HOST_OS)
    Win32.moveFileEx opath npath Win32.mOVEFILE_REPLACE_EXISTING
 #else
    Posix.rename opath npath
@@ -927,7 +1026,9 @@ copyFileWithMetadata :: FilePath        -- ^ Source file
 copyFileWithMetadata src dst =
   (`ioeAddLocation` "copyFileWithMetadata") `modifyIOError` doCopy
   where
-#ifdef mingw32_HOST_OS
+#ifdef ghcjs_HOST_OS
+    doCopy = js_copyFileWithMetadata (toJSString src) (toJSString dst)
+#elif defined(mingw32_HOST_OS)
     doCopy = Win32.copyFile src dst False
 #else
     doCopy = do
@@ -936,7 +1037,7 @@ copyFileWithMetadata src dst =
       copyMetadataFromStatus st dst
 #endif
 
-#ifndef mingw32_HOST_OS
+#ifdef posix_OS
 copyMetadataFromStatus :: Posix.FileStatus -> FilePath -> IO ()
 copyMetadataFromStatus st dst = do
   tryCopyOwnerAndGroupFromStatus st dst
@@ -944,26 +1045,26 @@ copyMetadataFromStatus st dst = do
   copyFileTimesFromStatus st dst
 #endif
 
-#ifndef mingw32_HOST_OS
+#ifdef posix_OS
 tryCopyOwnerAndGroupFromStatus :: Posix.FileStatus -> FilePath -> IO ()
 tryCopyOwnerAndGroupFromStatus st dst = do
   ignoreIOExceptions (copyOwnerFromStatus st dst)
   ignoreIOExceptions (copyGroupFromStatus st dst)
 #endif
 
-#ifndef mingw32_HOST_OS
+#ifdef posix_OS
 copyOwnerFromStatus :: Posix.FileStatus -> FilePath -> IO ()
 copyOwnerFromStatus st dst = do
   Posix.setOwnerAndGroup dst (Posix.fileOwner st) (-1)
 #endif
 
-#ifndef mingw32_HOST_OS
+#ifdef posix_OS
 copyGroupFromStatus :: Posix.FileStatus -> FilePath -> IO ()
 copyGroupFromStatus st dst = do
   Posix.setOwnerAndGroup dst (-1) (Posix.fileGroup st)
 #endif
 
-#ifndef mingw32_HOST_OS
+#ifdef posix_OS
 copyFileTimesFromStatus :: Posix.FileStatus -> FilePath -> IO ()
 copyFileTimesFromStatus st dst = do
   let (atime, mtime) = fileTimesFromStatus st
@@ -1031,6 +1132,10 @@ copyFileTimesFromStatus st dst = do
 --
 canonicalizePath :: FilePath -> IO FilePath
 canonicalizePath = \ path ->
+#if defined(ghcjs_HOST_OS)
+  -- fixme implement correct exception behaviour for GHCJS impl
+  fromJSString `fmap` js_canonicalizePath (toJSString path)
+#else
   modifyIOError ((`ioeAddLocation` "canonicalizePath") .
                  (`ioeSetFileName` path)) $
   -- normalise does more stuff, like upper-casing the drive letter
@@ -1050,7 +1155,6 @@ canonicalizePath = \ path ->
               (`withRealpath` GHC.peekCString encoding)
       attemptRealpath realpath path
 #endif
-
     attemptRealpath realpath path =
       realpathPrefix realpath (reverse (zip prefixes suffixes)) path
       where segments = splitDirectories path
@@ -1065,6 +1169,7 @@ canonicalizePath = \ path ->
              `catchIOError` \ _ -> realpathPrefix realpath rest path
         else realpathPrefix realpath rest path
     realpathPrefix _ _ path = return path
+#endif
 
 -- | Convert a path into an absolute path.  If the given path is relative, the
 -- current directory is prepended and then the combined result is
@@ -1138,7 +1243,9 @@ makeRelativeToCurrentDirectory x = do
 --
 findExecutable :: String -> IO (Maybe FilePath)
 findExecutable binary = do
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+    listToMaybe <$> findExecutables binary
+#elif defined(mingw32_HOST_OS)
     Win32.searchPath Nothing binary exeExtension
 #else
     path <- getPath
@@ -1155,7 +1262,9 @@ findExecutable binary = do
 -- @since 1.2.2.0
 findExecutables :: String -> IO [FilePath]
 findExecutables binary = do
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+    fmap (map fromJSString) $ fromJSArray =<< js_findExecutables (toJSString binary)
+#elif defined(mingw32_HOST_OS)
     file <- findExecutable binary
     return $ maybeToList file
 #else
@@ -1163,7 +1272,7 @@ findExecutables binary = do
     findExecutablesInDirectories path binary
 #endif
 
-#ifndef mingw32_HOST_OS
+#ifdef posix_OS
 -- | Get the contents of the @PATH@ environment variable.
 getPath :: IO [FilePath]
 getPath = do
@@ -1247,7 +1356,10 @@ getDirectoryContents :: FilePath -> IO [FilePath]
 getDirectoryContents path =
   modifyIOError ((`ioeSetFileName` path) .
                  (`ioeAddLocation` "getDirectoryContents")) $ do
-#ifndef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+    fmap (map fromJSString) $ fromJSArray =<< throwErrnoIfJSNull "getDirectoryContents"
+      (js_getDirectoryContents (toJSString path))
+#elif !defined(mingw32_HOST_OS)
     bracket
       (Posix.openDirStream path)
       Posix.closeDirStream
@@ -1278,6 +1390,7 @@ getDirectoryContents path =
           else return (filename:acc)
                  -- no need to reverse, ordering is undefined
 #endif /* mingw32 */
+{-# NOINLINE getDirectoryContents #-}
 
 -- | @'listDirectory' dir@ returns a list of /all/ entries in /dir/ without
 -- the special entries (@.@ and @..@).
@@ -1350,7 +1463,9 @@ getCurrentDirectory =
     isDoesNotExistError
     getCwd
   where
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+    getCwd = fromJSString `fmap` throwErrnoIfJSNull "getCurrentDirectory" js_getCurrentDirectory
+#elif defined(mingw32_HOST_OS)
     getCwd = Win32.getCurrentDirectory
 #else
     getCwd = Posix.getWorkingDirectory
@@ -1391,7 +1506,9 @@ getCurrentDirectory =
 --
 setCurrentDirectory :: FilePath -> IO ()
 setCurrentDirectory =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+ throwErrnoIfMinus1_ "setCurrentDirectory" . js_setCurrentDirectory . toJSString
+#elif defined(mingw32_HOST_OS)
   Win32.setCurrentDirectory
 #else
   Posix.changeWorkingDirectory
@@ -1447,7 +1564,10 @@ and 'False' otherwise.
 
 doesDirectoryExist :: FilePath -> IO Bool
 doesDirectoryExist name =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+   (js_getFileStatusIsDirectory =<<
+    throwErrnoIfJSNull "doesDirectoryExist" (js_getFileStatus (toJSString name)))
+#elif defined(mingw32_HOST_OS)
    (withFileStatus "doesDirectoryExist" name $ \st -> isDirectory st)
 #else
    (do stat <- Posix.getFileStatus name
@@ -1461,7 +1581,10 @@ if the argument file exists and is not a directory, and 'False' otherwise.
 
 doesFileExist :: FilePath -> IO Bool
 doesFileExist name =
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+   (fmap not . js_getFileStatusIsDirectory =<<
+    throwErrnoIfJSNull "doesFileExist" (js_getFileStatus (toJSString name)))
+#elif defined(mingw32_HOST_OS)
    (withFileStatus "doesFileExist" name $ \st -> do b <- isDirectory st; return (not b))
 #else
    (do stat <- Posix.getFileStatus name
@@ -1476,7 +1599,9 @@ doesFileExist name =
 pathIsSymbolicLink :: FilePath -> IO Bool
 pathIsSymbolicLink path =
   (`ioeAddLocation` "getDirectoryType") `modifyIOError` do
-#ifdef mingw32_HOST_OS
+#ifdef ghcjs_HOST_OS
+    js_getFileStatusIsSymbolicLink =<< js_getFileOrSymlinkStatus (toJSString path)
+#elif defined(mingw32_HOST_OS)
     isReparsePoint <$> Win32.getFileAttributes path
   where
     isReparsePoint attr = attr .&. win32_fILE_ATTRIBUTE_REPARSE_POINT /= 0
@@ -1543,7 +1668,13 @@ getFileTimes path =
     getTimes
   where
     path' = normalise path              -- handle empty paths
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+    cvtTime = fmap (posixSecondsToUTCTime . realToFrac)
+    getTimes = do
+      st <- js_getFileStatus (toJSString path')
+      (,) <$> cvtTime (js_getFileStatusAccessTime st)
+          <*> cvtTime (js_getFileStatusModificationTime st)
+#elif defined(mingw32_HOST_OS)
     getTimes =
       bracket (openFileHandle path' Win32.gENERIC_READ)
               Win32.closeHandle $ \ handle ->
@@ -1558,7 +1689,7 @@ getFileTimes path =
     getTimes = fileTimesFromStatus <$> Posix.getFileStatus path'
 #endif
 
-#ifndef mingw32_HOST_OS
+#if !defined(mingw32_HOST_OS) && !defined(ghcjs_HOST_OS)
 fileTimesFromStatus :: Posix.FileStatus -> (UTCTime, UTCTime)
 fileTimesFromStatus st =
 # if MIN_VERSION_unix(2, 6, 0)
@@ -1636,7 +1767,10 @@ setFileTimes path (atime, mtime) =
     path' = normalise path              -- handle empty paths
 
     setTimes :: (Maybe POSIXTime, Maybe POSIXTime) -> IO ()
-#ifdef mingw32_HOST_OS
+#if defined(ghcjs_HOST_OS)
+    setTimes time =
+      error "fixme: setFileTimes unimplemented for GHCJS"
+#elif defined(mingw32_HOST_OS)
     setTimes (atime', mtime') =
       bracket (openFileHandle path' Win32.gENERIC_WRITE)
               Win32.closeHandle $ \ handle ->
@@ -1729,7 +1863,9 @@ cannot be found.
 getHomeDirectory :: IO FilePath
 getHomeDirectory = modifyIOError (`ioeAddLocation` "getHomeDirectory") get
   where
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+    get = fromJSString `fmap` throwErrnoIfJSNull "getHomeDirectory" js_getHomeDirectory
+#elif defined(mingw32_HOST_OS)
     get = getFolderPath Win32.cSIDL_PROFILE `catchIOError` \ _ ->
           getFolderPath Win32.cSIDL_WINDOWS
     getFolderPath what = Win32.sHGetFolderPath nullPtr what nullPtr 0
@@ -1798,7 +1934,9 @@ getXdgDirectory xdgDir suffix =
     XdgConfig -> get False "XDG_CONFIG_HOME" ".config"
     XdgCache  -> get True  "XDG_CACHE_HOME"  ".cache"
   where
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+    get _ _ _ = error "fixme: getXdgDirectory not implemented for GHCJS"
+#elif defined(mingw32_HOST_OS)
     get isLocal _ _ = Win32.sHGetFolderPath nullPtr which nullPtr 0
       where which | isLocal   = win32_cSIDL_LOCAL_APPDATA
                   | otherwise = Win32.cSIDL_APPDATA
@@ -1868,7 +2006,10 @@ getAppUserDataDirectory :: FilePath     -- ^ a relative path that is appended
                         -> IO FilePath
 getAppUserDataDirectory appName = do
   modifyIOError (`ioeAddLocation` "getAppUserDataDirectory") $ do
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+    fromJSString `fmap` throwErrnoIfJSNull "getAppUserDataDirectory"
+      (js_getAppUserDataDirectory (toJSString appName))
+#elif defined(mingw32_HOST_OS)
     s <- Win32.sHGetFolderPath nullPtr Win32.cSIDL_APPDATA nullPtr 0
     return (s++'\\':appName)
 #else
@@ -1899,7 +2040,9 @@ cannot be found.
 getUserDocumentsDirectory :: IO FilePath
 getUserDocumentsDirectory = do
   modifyIOError (`ioeAddLocation` "getUserDocumentsDirectory") $ do
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+    fromJSString `fmap` throwErrnoIfJSNull "getUserDocumentsDirectory" js_getUserDocumentsDirectory
+#elif defined(mingw32_HOST_OS)
     Win32.sHGetFolderPath nullPtr Win32.cSIDL_PERSONAL nullPtr 0
 #else
     getEnv "HOME"
@@ -1933,7 +2076,9 @@ The function doesn\'t verify whether the path exists.
 -}
 getTemporaryDirectory :: IO FilePath
 getTemporaryDirectory =
-#if defined(mingw32_HOST_OS)
+#if defined(ghcjs_HOST_OS)
+  fromJSString `fmap` throwErrnoIfJSNull "getTemporaryDirectory" js_getTemporaryDirectory
+#elif defined(mingw32_HOST_OS)
   Win32.getTemporaryDirectory
 #else
   getEnv "TMPDIR" `catchIOError` \ err ->
diff --git a/System/Directory/Internal/Config.hs b/System/Directory/Internal/Config.hs
index 5cc1b3e..f1614e2 100644
--- a/System/Directory/Internal/Config.hs
+++ b/System/Directory/Internal/Config.hs
@@ -1,13 +1,27 @@
 {-# LANGUAGE CPP #-}
+#if defined(ghcjs_HOST_OS)
+{-# LANGUAGE JavaScriptFFI, GHCForeignImportPrim #-}
+#else
 #include <HsDirectoryConfig.h>
+#endif
 module System.Directory.Internal.Config where
 
+#if defined(ghcjs_HOST_OS)
+import GHCJS.Prim
+#endif
+
 -- | Filename extension for executable files (including the dot if any)
 --   (usually @\"\"@ on POSIX systems and @\".exe\"@ on Windows or OS\/2).
 --
 -- @since 1.2.4.0
 exeExtension :: String
+#if defined(ghcjs_HOST_OS)
+exeExtension = fromJSString js_exeExtension
+
+foreign import javascript unsafe "h$directory_exeExtension()" js_exeExtension :: JSVal
+#else
 exeExtension = EXE_EXTENSION
+#endif
 -- We avoid using #const_str from hsc because it breaks cross-compilation
 -- builds, so we use this ugly workaround where we simply paste the C string
 -- literal directly in here.  This will probably break if the EXE_EXTENSION
diff --git a/directory.cabal b/directory.cabal
index 7200487..8157160 100644
--- a/directory.cabal
+++ b/directory.cabal
@@ -57,6 +57,8 @@ Library
         base     >= 4.5 && < 4.11,
         time     >= 1.4 && < 1.8,
         filepath >= 1.3 && < 1.5
+    if impl(ghcjs)
+        build-depends: ghcjs-prim
     if os(windows)
         build-depends: Win32 >= 2.2.2 && < 2.5
     else
